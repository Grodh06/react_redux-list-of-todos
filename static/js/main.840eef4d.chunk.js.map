{"version":3,"sources":["store/filterReducer.ts","store/loadingReducer.ts","store/todosReducer.ts","store/userReducer.ts","store/index.ts","api.ts","components/Loader/Loader.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["initialState","query","completed","actions","type","payload","todosLoading","userLoading","todos","choosenTodo","todoId","user","rootReducer","combineReducers","todosState","action","find","todo","id","loading","state","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useSelector","get","url","delay","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoFilter","dispatch","useDispatch","useState","setQuery","apllyQuery","useCallback","debounce","e","filterActions","onChange","event","target","value","placeholder","style","pointerEvents","onClick","TodoList","map","classNames","title","actionsTodos","TodoModal","useEffect","loadingActions","userId","userFromServer","userActions","finally","href","email","name","App","visibleTodos","i","includes","todosFromServer","todosActions","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.840eef4d.chunk.js","sourcesContent":["type FilterState = {\n  query : string\n  completed: string\n};\n\nconst initialState: FilterState = {\n  query: '',\n  completed: 'filter-all',\n};\n\ntype SetQuaryFilterAction = {\n  type: 'set-query'\n  payload: string,\n};\n\ntype SetCompletedFilterAction = {\n  type: string\n  payload: string\n};\n\ntype FilterActions = SetCompletedFilterAction | SetQuaryFilterAction;\n\nexport const actions = {\n  SetCompletedFilter: (\n    type: string,\n  ): SetCompletedFilterAction => ({ payload: '', type }),\n  setQueryFilter: (query: string): SetQuaryFilterAction => (\n    { payload: query, type: 'set-query' }\n  ),\n};\n\nexport const filterReducer = (\n  state: FilterState = initialState,\n  action: FilterActions,\n) => {\n  switch (action.type) {\n    case 'filter-all':\n      return {\n        ...state,\n        completed: 'filter-all',\n      };\n\n    case 'filter-completed':\n      return {\n        ...state,\n        completed: 'filter-completed',\n      };\n\n    case 'filter-active':\n      return {\n        ...state,\n        completed: 'filter-active',\n      };\n    case 'set-query':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","type LoadingState = {\n  todosLoading: boolean,\n  userLoading: boolean,\n};\n\nconst initialState = {\n  todosLoading: false,\n  userLoading: false,\n};\n\ntype StartLoadingTodosAction = {\n  type: 'todos/loading-start'\n};\n\ntype FinishLoadingTodosAction = {\n  type: 'todos/loading-finish'\n};\n\ntype StartLoadingUserAction = {\n  type: 'user/loading-start'\n};\n\ntype FinishLoadingUserAction = {\n  type: 'user/loading-finish'\n};\n\nexport type LoadingActions\n  = StartLoadingTodosAction\n  | FinishLoadingTodosAction\n  | StartLoadingUserAction\n  | FinishLoadingUserAction;\n\nexport const actions = {\n  startLoadingTodos: (): StartLoadingTodosAction => (\n    { type: 'todos/loading-start' }\n  ),\n  finishLoadingTodos: (): FinishLoadingTodosAction => (\n    { type: 'todos/loading-finish' }\n  ),\n  startLoadingUser: (): StartLoadingUserAction => (\n    { type: 'user/loading-start' }\n  ),\n  finishLoadingUser: (): FinishLoadingUserAction => (\n    { type: 'user/loading-finish' }\n  ),\n};\n\nexport const loadingReducer = (\n  state: LoadingState = initialState,\n  action: LoadingActions,\n) => {\n  switch (action.type) {\n    case 'todos/loading-start':\n      return {\n        ...state,\n        todosLoading: true,\n      };\n\n    case 'todos/loading-finish':\n      return {\n        ...state,\n        todosLoading: false,\n      };\n\n    case 'user/loading-start':\n      return {\n        ...state,\n        userLoading: true,\n      };\n\n    case 'user/loading-finish':\n      return {\n        ...state,\n        userLoading: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { Todo } from '../types/Todo';\n\ntype TodosState = {\n  todos: Todo[]\n  choosenTodo: Todo | null\n};\n\ntype SetTodosAction = {\n  type: 'todos/set'\n  payload: Todo[]\n};\n\ntype ChoseTodoAction = {\n  type: 'todo/choose'\n  payload: number | null\n};\n\nconst initialState = {\n  todos: [],\n  choosenTodo: null,\n};\n\nexport type TodosActions = SetTodosAction | ChoseTodoAction;\n\nexport const actions = {\n  setTodos: (todos: Todo[]): SetTodosAction => ({\n    type: 'todos/set',\n    payload: todos,\n  }),\n\n  choseTodo: (todoId: number | null): ChoseTodoAction => ({\n    type: 'todo/choose',\n    payload: todoId,\n  }),\n};\n\nexport const todosReducer = (\n  todosState: TodosState = initialState,\n  action: TodosActions,\n): TodosState => {\n  switch (action.type) {\n    case 'todos/set':\n      return {\n        ...todosState,\n        todos: action.payload,\n      };\n\n    case 'todo/choose':\n      return {\n        ...todosState,\n        choosenTodo: todosState.todos\n          .find(todo => todo.id === action.payload) || null,\n      };\n\n    default:\n      return todosState;\n  }\n};\n","import { User } from '../types/User';\n\ntype SetUserAction = {\n  type: 'user/set'\n  payload: User | null\n};\n\nexport type UserActions = SetUserAction;\n\nexport const userReducer = (\n  user: User | null = null,\n  action: UserActions,\n): User | null => {\n  switch (action.type) {\n    case 'user/set':\n      return action.payload;\n\n    default:\n      return user;\n  }\n};\n\nexport const actions = {\n  setUser: (user: User | null): SetUserAction => ({\n    type: 'user/set',\n    payload: user,\n  }),\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { filterReducer } from './filterReducer';\nimport { loadingReducer } from './loadingReducer';\nimport { todosReducer } from './todosReducer';\nimport { userReducer } from './userReducer';\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  user: userReducer,\n  loading: loadingReducer,\n  filter: filterReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  return wait(1000)\n    .then(() => fetch(BASE_URL + url))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => {\n  return get<Todo[]>('/todos');\n};\n\nexport const getUser = (id: number): Promise<User> => {\n  return get<User>(`/users/${id}`);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { debounce } from 'lodash';\nimport { actions as filterActions } from '../../store/filterReducer';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n\n  const reset = () => {\n    dispatch(filterActions.setQueryFilter(''));\n    dispatch(filterActions.SetCompletedFilter('filter-all'));\n  };\n\n  const apllyQuery = useCallback(\n    debounce((e) => dispatch(filterActions.setQueryFilter(e)), 500),\n    [],\n  );\n\n  const handleStatusFilter = (e: string) => {\n    dispatch(filterActions.SetCompletedFilter(e));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={(event) => handleStatusFilter(event.target.value)}\n          >\n            <option value=\"filter-all\">All</option>\n            <option value=\"filter-active\">Active</option>\n            <option value=\"filter-completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"filterByTitle\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n            apllyQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete has-text\"\n              onClick={reset}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { actions as actionsTodos } from '../../store/todosReducer';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <table\n      data-cy=\"listOfTodos\"\n      className=\"table is-narrow is-fullwidth\"\n    >\n      <tbody>\n        {todos.map(todo => {\n          return (\n            <tr\n              className={todo.completed\n                ? ('has-background-success-light has-text-success')\n                : ('has-background-danger-light has-text-danger')}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">\n                <span className=\"icon is-size-5\">\n                  <i\n                    className={classNames('fas', {\n                      'fas fa-check-square': todo.completed,\n                      'fa-square-xmark': !todo.completed,\n                    })}\n                  />\n                </span>\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                {todo.title}\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  className=\"button is-warning\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(actionsTodos.choseTodo(todo.id));\n                  }}\n                >\n                  {`Show : #${todo.id}`}\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../store';\nimport { actions as loadingActions } from '../../store/loadingReducer';\nimport { actions as actionsTodos } from '../../store/todosReducer';\nimport { actions, actions as userActions } from '../../store/userReducer';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader/Loader';\n\ntype Props = {\n  choosenTodo: Todo\n};\n\nexport const TodoModal: React.FC<Props> = ({ choosenTodo }) => {\n  const dispatch = useDispatch();\n  const user = useAppSelector(state => state.user);\n\n  useEffect(() => {\n    dispatch(loadingActions.startLoadingUser());\n    getUser(choosenTodo.userId)\n      .then(userFromServer => {\n        dispatch(userActions.setUser(userFromServer));\n      })\n      .finally(() => dispatch(loadingActions.finishLoadingUser()));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" />\n      {!user\n        ? (\n          <Loader />\n        )\n        : (\n          <>\n            {!choosenTodo\n              ? ('no todo')\n              : (\n                <div className=\"modal-card\">\n                  <header className=\"modal-card-head\">\n                    <div className=\"modal-card-title has-text-weight-medium\">\n                      {`Todo: #${choosenTodo.id}`}\n                    </div>\n                    <a\n                      href=\"#close\"\n                      className=\"delete\"\n                      onClick={() => {\n                        dispatch(actionsTodos.choseTodo(null));\n                        dispatch(actions.setUser(null));\n                      }}\n                    >\n                      Close\n                    </a>\n                  </header>\n\n                  <div className=\"modal-card-body\">\n                    <p className=\"block\">{choosenTodo.title}</p>\n\n                    <p className=\"block\">\n                      {choosenTodo.completed\n                        ? (<strong className=\"has-text-success\">Done</strong>)\n                        : (\n                          <strong\n                            className=\"has-text-danger\"\n                          >\n                            Planned\n                          </strong>\n                        )}\n                      {' by '}\n                      <a href={`mailto:${user?.email}`}>\n                        {user?.name}\n                      </a>\n                    </p>\n                  </div>\n                </div>\n              )}\n          </>\n        )}\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getTodos } from './api';\n\nimport './App.scss';\nimport { Loader } from './components/Loader';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\n\nimport { useAppSelector } from './store';\nimport { actions as loadingActions } from './store/loadingReducer';\nimport { actions as todosActions } from './store/todosReducer';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const { todosLoading } = useAppSelector(state => state.loading);\n  const { choosenTodo } = useAppSelector(state => state.todos);\n\n  const visibleTodos = useAppSelector(state => {\n    const { query } = state.filter;\n    const { completed } = state.filter;\n    const { todos } = state.todos;\n\n    return todos.filter(todo => {\n      switch (completed) {\n        case 'filter-active':\n          return !todo.completed;\n\n        case 'filter-completed':\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    }).filter(i => i.title.includes(query));\n  });\n\n  useEffect(() => {\n    dispatch(loadingActions.startLoadingTodos());\n    getTodos()\n      .then(todosFromServer => {\n        dispatch(todosActions.setTodos(todosFromServer));\n      })\n      .finally(() => dispatch(loadingActions.finishLoadingTodos()));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todosLoading && <Loader /> }\n\n              {!todosLoading && visibleTodos.length > 0\n                && (\n                  <TodoList\n                    todos={visibleTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {choosenTodo && (\n        <TodoModal choosenTodo={choosenTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}